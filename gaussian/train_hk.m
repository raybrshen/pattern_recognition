% parameters: training samples of the two classes, learning rate(0~1), maximum training epoch% return: trained parameters for a linear discriminant function ax+b=0function [a,b] = train_hk(samples1,samples2,alpha,nepoch)  % get size size of samples  [n1,d] = size(samples1);  [n2,d] = size(samples2);  % merge into one training data set  samples1 = [ ones(n1,1) , samples1 ]; % make it (n1)*(d+1) dimension  samples2 = [ -ones(n2,1) , -samples2 ]; % make it (n2)*(d+1) dimension  X = [ samples1 ; samples2 ]; % (n1+n2)*(d+1)dimension  % initialize parameters to be trained  a = ones(d+1,1);  b = ones(n1+n2,1);  % start training  for i = 1:nepoch    %fprintf('training epoch %d...\n', i);    % criterion for current epoch    e = X*a.-b;    if e>=0 % check exit condition      %fprintf('break (e>=0)\n');      break;    end    % solve for the next b using current a and b    _b = b.+alpha.*(e.+abs(e));    if _b==b % check exit condition      %fprintf('break (_b==b)\n');      break;    end    % solve for the next a using current a and b    _a = inv(X'*X)*X'*_b;    % update parameters    a = _a;    b = _b;  end  %fprintf('exit at epoch %d\n', i);end