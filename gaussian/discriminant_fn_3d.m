% parameters: means, covariance matrices and probabilities of the two classes% return: parameters of the discriminant functionfunction [A,B,C] = discriminant_fn_3d(M1,M2,Sig1,Sig2,P1,P2)  A = inv(Sig2)-inv(Sig1); # dimension dxd  B = 2*(M1'*inv(Sig1)-M2'*inv(Sig2)); # dimension dx1  C = M2'*inv(Sig2)*M2-M1'*inv(Sig1)*M1-log(det(Sig1)/det(Sig2))-2*log(P2/P1); # dimension 1x1end%%% parameters: means, covariance matrices and probabilities of the two classes%% return: linear points of discriminant functions on two domains%function [dis_1_2,dis_1_3] = discriminant_fn_3d(M1,M2,Sig1,Sig2,P1,P2)%  A = inv(Sig2)-inv(Sig1);%  B = 2*(M1*inv(Sig1)-M2*inv(Sig2));%  C = M2*inv(Sig2)*M2'-M1*inv(Sig1)*M1'-log(det(Sig1)/det(Sig2))-2*log(P2/P1);%%  % fn = @(x)[1,x,0]*A*[1;x;0]+B*[1;x;0]+C;%  % ret = fsolve(fn,x0)%  dis_1_2 = zeros(41,3);%  for i = -20:20%    dis_1_2(i+21,1) = i;%    fn = @(x)[i,x,0]*A*[i;x;0]+B*[i;x;0]+C;%    x0 = -20;%    ret = fsolve(fn,x0);%    dis_1_2(i+21,2) = ret;%    x0 = 20;%    ret = fsolve(fn,x0);%    dis_1_2(i+21,3) = ret;%    % fprintf('%g : %g\n', i, ret)%  end%  %  dis_1_3 = zeros(41,3);%  for i = -20:20%    dis_1_3(i+21,1) = i;%    fn = @(x)[i,0,x]*A*[i;0;x]+B*[i;0;x]+C;%    x0 = -20;%    ret = fsolve(fn,x0);%    dis_1_3(i+21,2) = ret;%    x0 = 20;%    ret = fsolve(fn,x0);%    dis_1_3(i+21,3) = ret;%    % fprintf('%g : %g\n', i, ret)%  end%  %  % display(points)%  % line(points(:,1),points(:,2))%end