% parameters: flag of priting result, n-fold, samples and a priori of two classes%             true covariance and initial guess for bayesian estimation% return: accuracy of the two methodsfunction [acc_ml,acc_be] = cross_validation(pr,fold,samples1,samples2,p1,p2,sig1,sig2)  [n,d] = size(samples1);  % get test batch size  batch = n/fold;  % define overall accuracy  acc_ml = 0;  acc_be = 0;  for i = 1:fold    % divide samples into training set and test set    if i==1      test1 = samples1(1:batch,:);      test2 = samples2(1:batch,:);      train1 = samples1(batch+1:end,:);      train2 = samples2(batch+1:end,:);    elseif i==fold      test1 = samples1((fold-1)*batch+1:end,:);      test2 = samples2((fold-1)*batch+1:end,:);      train1 = samples1(1:(fold-1)*batch,:);      train2 = samples2(1:(fold-1)*batch,:);    else      test1 = samples1((i-1)*batch+1:end,:);      test2 = samples2((i-1)*batch+1:end,:);      train1 = [ samples1(1:(i-1)*batch,:) ; samples1(i*batch+1:end,:) ];      train2 = [ samples2(1:(i-1)*batch,:) ; samples2(i*batch+1:end,:) ];    end    % train with maximum likelihood    [m1_ml,cov1_ml] = maximum_likelihood(train1);    [m2_ml,cov2_ml] = maximum_likelihood(train2);    % train with bayesian estimation    [m1_be,cov1_be] = bayesian_estimation(train1,sig1);    [m2_be,cov2_be] = bayesian_estimation(train2,sig2);    % calculate discriminant function of both methods    [A_ml,B_ml,C_ml] = discriminant_fn_3d(m1_ml,m2_ml,cov1_ml,cov2_ml,p1,p2);    [A_be,B_be,C_be] = discriminant_fn_3d(m1_be,m2_be,sig1,sig2,p1,p2);    % accumulate accuracy    %acc_ml += test(test1,test2,A_ml,B_ml,C_ml,false);    %acc_be += test(test1,test2,A_be,B_be,C_be,false);    [~,acc1] = test(test1,test2,A_ml,B_ml,C_ml,false);    [~,acc2] = test(test1,test2,A_be,B_be,C_be,false);    acc_ml = acc_ml+acc1;    acc_be = acc_be+acc2;    if pr      fprintf('%d-fold ml acc: %g\n', i,acc1);      fprintf('%d-fold be acc: %g\n', i,acc2);    end  end  % calculate average accuracy of the n folds  acc_ml = acc_ml/fold;  acc_be = acc_be/fold;  if pr    fprintf('overall ml acc: %g\n', acc_ml);    fprintf('overall be acc: %g\n', acc_be);  endend